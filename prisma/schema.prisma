// This is your Prisma schema file,schem
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

model User {
  id       String @id @default(uuid())
  name     String @db.VarChar(100)
  password String @db.VarChar(100)
  username String @unique @db.VarChar(45)
  email    String @unique @db.VarChar(45)
  role     Role   @default(VIEWER)

  createdAt DateTime @default(now())
}

model Citizen {
  id      String    @id @default(uuid())
  name    String    @unique @db.VarChar(100)
  Student Student[]
}

model VisaType {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(100)
  visas Visa[]
}

model Consultant {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(65)
  phoneNumber String?   @db.VarChar(65) // Может быть null
  Student     Student[]
}

model Visa {
  id         String    @id @default(uuid())
  visaSeries String?   @db.VarChar(65) // Может быть null
  visaNumber String?   @db.VarChar(65) // Может быть null
  visaStart  DateTime? // Может быть null
  visaEnd    DateTime? // Может быть null
  visaType   VisaType  @relation(fields: [visaTypeId], references: [id])
  visaTypeId String
  student    Student   @relation(fields: [studentsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  studentsId String
}

model Registration {
  id                  String    @id @default(uuid())
  registrationSeries  String?   @db.VarChar(45) // Может быть null
  registrationNumber  String?   @db.VarChar(45) // Может быть null
  registrationAddress String?   @db.VarChar(200) // Может быть null
  registrationStart   DateTime? // Может быть null
  registrationEnd     DateTime? // Может быть null
  student             Student   @relation(fields: [studentsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  studentsId          String
}

model Student {
  id          String  @id @default(uuid())
  phoneNumber String? @db.VarChar(90) // Может быть null
  firstName   String? @db.VarChar(90)
  lastName    String? @db.VarChar(90) // Может быть null
  middleName  String? @db.VarChar(90) // Может быть null

  passportSeries  String?        @db.VarChar(40)
  passportNumber  String?        @db.VarChar(40)
  passportExpired DateTime? // Может быть null
  pinfl           String?        @db.VarChar(40)
  visas           Visa[]
  registrations   Registration[]

  consultant   Consultant @relation(fields: [consultantId], references: [id])
  consultantId String

  citizen   Citizen @relation(fields: [citizenId], references: [id])
  citizenId String

  createdAt DateTime @default(now())
}

model Settings {
  id               String @id @default(uuid())
  visaTime         Int    @db.SmallInt
  registrationTime Int    @db.SmallInt
}
